<style>
    .insert_iorad {
        background-image: url("//iorad.com/server/assets/img/icon_iorad_freshdesk.png") !important;
        background-size: 100%;
    }
    
    div.input-control {
        margin: 24px;
    }
    
    div.input-control select {
        min-width: 172px;
    }
    
    div.body-input-control {
        text-align: center;
    }
</style>
<script type="text/javascript">
    /*! iorad-ticketing-freshplug 2015-11-05 */
    CustomWidget.include_js("//iorad.com/server/assets/js/iorad.js"), CustomWidget.include_js("//cdnjs.cloudflare.com/ajax/libs/handlebars.js/3.0.3/handlebars.min.js");
    var ioradFreshplug = function(a, b) {
            return a = {
                util: {},
                templates: {},
                requests: {},
                addToKnowledgebase: !1,
                markAsPublished: !0,
                categories: [],
                selectedCategoryId: b,
                foldersDictionary: {},
                freshplug_webwidgetmode: !1
            }
        }(ioradFreshplug || {}),
        initTemplate = function() {
            this.JST = this.JST || {}, this.JST["templates/hyperLinkTemplate.hbs"] = Handlebars.template({
                compiler: [6, ">= 2.0.0-beta.1"],
                main: function(a, b, c, d) {
                    var e, f = b.helperMissing,
                        g = "function",
                        h = this.escapeExpression;
                    return '<a href="' + h((e = null != (e = b.href || (null != a ? a.href : a)) ? e : f, typeof e === g ? e.call(a, {
                        name: "href",
                        hash: {},
                        data: d
                    }) : e)) + '">' + h((e = null != (e = b.content || (null != a ? a.content : a)) ? e : f, typeof e === g ? e.call(a, {
                        name: "content",
                        hash: {},
                        data: d
                    }) : e)) + "</a>"
                },
                useData: !0
            }), this.JST["templates/inputControlTemplate.hbs"] = Handlebars.template({
                1: function(a, b, c, d) {
                    return " checked"
                },
                3: function(a, b, c, d) {
                    var e;
                    return '    <div class="input-control">\r\n        <label for="selectCategory">Categories<span class="required_star">*</span></label>\r\n        <select class="categoryOptions field" id="categorySelector">\r\n' + (null != (e = b.each.call(a, null != a ? a.categories : a, {
                        name: "each",
                        hash: {},
                        fn: this.program(4, d, 0),
                        inverse: this.noop,
                        data: d
                    })) ? e : "") + '        </select>\r\n    </div>\r\n    <div class="input-control">\r\n        <label for="selectSection">Solutions<span class="required_star">*</span></label>\r\n        <select class="sectionOptions" id="folderSelector">\r\n' + (null != (e = b.each.call(a, null != a ? a.folders : a, {
                        name: "each",
                        hash: {},
                        fn: this.program(7, d, 0),
                        inverse: this.noop,
                        data: d
                    })) ? e : "") + '        </select>\r\n    </div>\r\n    <div class="input-control">\r\n        <input id="markAsPublished" type="checkbox" ' + (null != (e = b["if"].call(a, null != a ? a.markAsPublished : a, {
                        name: "if",
                        hash: {},
                        fn: this.program(1, d, 0),
                        inverse: this.noop,
                        data: d
                    })) ? e : "") + "> Automatically mark new tutorial as published.\r\n    </div>\r\n"
                },
                4: function(a, b, c, d) {
                    var e, f, g = b.helperMissing,
                        h = "function",
                        i = this.escapeExpression;
                    return '            <option value="' + i((f = null != (f = b.id || (null != a ? a.id : a)) ? f : g, typeof f === h ? f.call(a, {
                        name: "id",
                        hash: {},
                        data: d
                    }) : f)) + '"' + (null != (e = b["if"].call(a, null != a ? a.checked : a, {
                        name: "if",
                        hash: {},
                        fn: this.program(5, d, 0),
                        inverse: this.noop,
                        data: d
                    })) ? e : "") + ">\r\n                " + i((f = null != (f = b.name || (null != a ? a.name : a)) ? f : g, typeof f === h ? f.call(a, {
                        name: "name",
                        hash: {},
                        data: d
                    }) : f)) + "\r\n            </option>\r\n"
                },
                5: function(a, b, c, d) {
                    return " selected "
                },
                7: function(a, b, c, d) {
                    var e, f = b.helperMissing,
                        g = "function",
                        h = this.escapeExpression;
                    return '            <option value="' + h((e = null != (e = b.id || (null != a ? a.id : a)) ? e : f, typeof e === g ? e.call(a, {
                        name: "id",
                        hash: {},
                        data: d
                    }) : e)) + '">' + h((e = null != (e = b.name || (null != a ? a.name : a)) ? e : f, typeof e === g ? e.call(a, {
                        name: "name",
                        hash: {},
                        data: d
                    }) : e)) + "</option>\r\n"
                },
                compiler: [6, ">= 2.0.0-beta.1"],
                main: function(a, b, c, d) {
                    var e;
                    return '<div class="body-input-control">\r\n    <div class="input-control">\r\n        <input type="checkbox" id="addToKnowledgebaseToggle" ' + (null != (e = b["if"].call(a, null != a ? a.addToKnowledgebase : a, {
                        name: "if",
                        hash: {},
                        fn: this.program(1, d, 0),
                        inverse: this.noop,
                        data: d
                    })) ? e : "") + '> Auto-add Solution to Knowledge Base\r\n    </div>\r\n    <div class="loading hide">loading...</div>\r\n\r\n' + (null != (e = b["if"].call(a, null != a ? a.addToKnowledgebase : a, {
                        name: "if",
                        hash: {},
                        fn: this.program(3, d, 0),
                        inverse: this.noop,
                        data: d
                    })) ? e : "") + '\r\n    <div class="input-control">\r\n        <button id="newTutorial" class="btn btn-iorad-widget btn-primary" title="CAPTURE SOLUTION">CAPTURE SOLUTION</button>\r\n    </div>\r\n</div>\r\n'
                },
                useData: !0
            }), this.JST["templates/insertIoradButtonTemplate.hbs"] = Handlebars.template({
                compiler: [6, ">= 2.0.0-beta.1"],
                main: function(a, b, c, d) {
                    return '<li class="redactor_separator"></li>\r\n<li>\r\n	<a href="#" class="insert_iorad tooltip" data-editor-id="cnt-reply-body" rel="ticket_iorad" data-original-title="Insert Iorad Screen Capture">Iorad</a>\r\n</li>\r\n'
                },
                useData: !0
            }), this.JST["templates/insertKnowledgebaseSolutionButtonTemplate.hbs"] = Handlebars.template({
                compiler: [6, ">= 2.0.0-beta.1"],
                main: function(a, b, c, d) {
                    return '<li class="ticket-btns">\r\n    <div id="insertIoradToKnowledgebaseButton" class="btn tooltip"\r\n         data-original-title="Iorad" twipsy-content-set="true">\r\n        <img src="//iorad.com/server/assets/img/icon_iorad_freshdesk.png" style="height: 14px;" />\r\n        <span> Create Knowledgebase solution</span>\r\n    </div>\r\n</li>\r\n'
                },
                useData: !0
            }), this.JST["templates/insertSolutionModal.hbs"] = Handlebars.template({
                compiler: [6, ">= 2.0.0-beta.1"],
                main: function(a, b, c, d) {
                    return '<div class="modal fade in" role="dialog" aria-hidden="false" id="insert_iorad_solution" style="width: 710px; margin-left: -355px;">\r\n    <div class="modal-header">\r\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>\r\n        <h3 class="ellipsis modal-title" title="Iorad Screen Capture">Iorad Screen Capture</h3>\r\n    </div>\r\n    <div class="modal-body">\r\n    </div>\r\n</div>\r\n'
                },
                useData: !0
            }), this.JST["templates/knowledgebaseArticleCreatedModal.hbs"] = Handlebars.template({
                1: function(a, b, c, d) {
                    return " and a link has been attached to the ticket"
                },
                3: function(a, b, c, d) {
                    return "Return to ticket"
                },
                5: function(a, b, c, d) {
                    return "Close"
                },
                compiler: [6, ">= 2.0.0-beta.1"],
                main: function(a, b, c, d) {
                    var e, f, g = b.helperMissing,
                        h = "function",
                        i = this.escapeExpression;
                    return '<div class="modal fade iorad-widget-modal" role="dialog" id="successModal" aria-hidden="false">\r\n    <div class="modal-header">\r\n        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>\r\n        <h3 class="ellipsis modal-title">Article Created!</h3>\r\n    </div>\r\n    <div class="modal-body">\r\n        The solution <b>' + i((f = null != (f = b.articleTitle || (null != a ? a.articleTitle : a)) ? f : g, typeof f === h ? f.call(a, {
                        name: "articleTitle",
                        hash: {},
                        data: d
                    }) : f)) + "</b> has been successfully created" + (null != (e = b["if"].call(a, null != a ? a.freshplugTicketingView : a, {
                        name: "if",
                        hash: {},
                        fn: this.program(1, d, 0),
                        inverse: this.noop,
                        data: d
                    })) ? e : "") + '.\r\n    </div>\r\n    <div class="modal-footer">\r\n        <button type="button" class="btn btn-default" data-dismiss="modal">' + (null != (e = b["if"].call(a, null != a ? a.freshplugTicketingView : a, {
                        name: "if",
                        hash: {},
                        fn: this.program(3, d, 0),
                        inverse: this.program(5, d, 0),
                        data: d
                    })) ? e : "") + '</button>\r\n        <a class="btn btn-primary" href="' + i((f = null != (f = b.articleHref || (null != a ? a.articleHref : a)) ? f : g, typeof f === h ? f.call(a, {
                        name: "articleHref",
                        hash: {},
                        data: d
                    }) : f)) + '">VIEW ARTICLE</a>\r\n    </div>\r\n</div>\r\n'
                },
                useData: !0
            }), ioradFreshplug.templates = function(a, b, c) {
                return a.insertIoradButtonTemplate = function() {
                    var a = b.JST["templates/insertIoradButtonTemplate.hbs"];
                    return a()
                }, a.inputControlTemplate = function(a) {
                    var c = b.JST["templates/inputControlTemplate.hbs"];
                    return c({
                        categories: a.categories,
                        folders: a.folders,
                        addToKnowledgebase: a.addToKnowledgebase,
                        markAsPublished: a.markAsPublished
                    })
                }, a.insertSolutionModal = function() {
                    var a = b.JST["templates/insertSolutionModal.hbs"];
                    return a()
                }, a.getHyperLink = function(a, c) {
                    var d = b.JST["templates/hyperLinkTemplate.hbs"];
                    return d({
                        href: a,
                        content: c
                    })
                }, a.addToKnowledgebaseButtonTemplate = function() {
                    var a = b.JST["templates/insertKnowledgebaseSolutionButtonTemplate.hbs"];
                    return a()
                }, a.articleCreatedModalTemplate = function(a, c) {
                    var d = b.JST["templates/knowledgebaseArticleCreatedModal.hbs"];
                    return d({
                        articleTitle: a.title,
                        articleHref: a.href,
                        freshplugTicketingView: c
                    })
                }, a
            }(ioradFreshplug.templates || {}, window)
        };
    ioradFreshplug.requests = function(a, b, c) {
        var d = "/solution/categories.json",
            e = "/solution/categories/{category_id}/folders/{folder_id}/articles.json",
            f = function() {
                return {
                    dataType: "json",
                    contentType: "application/json"
                }
            };
        return a.listCategories = function() {
            var a = f();
            return a.type = "GET", a.url = d, b.ajax(a)
        }, a.createArticle = function(a, c, d) {
            var g = f();
            return g.type = "POST", g.url = e.replace("{category_id}", a.toString()).replace("{folder_id}", c.toString()), g.data = d, b.ajax(g)
        }, a
    }(ioradFreshplug.requests || {}, jQuery);
    var initializeFreshplug = function() {
            iorad = window.iorad || {}, jQuery(".redactor_insert_btns ul").append(ioradFreshplug.templates.insertIoradButtonTemplate()), $ticketActionsButtons = jQuery(".ticket-actions ul"), $ticketActionsButtons.html(ioradFreshplug.templates.addToKnowledgebaseButtonTemplate() + $ticketActionsButtons.html()), iorad.init({
                env: "live",
                pluginType: "freshplug_ticketing"
            }, function() {
                var a = 0,
                    b = jQuery("body"),
                    c = function() {
                        b.addClass("iorad-loading"), iorad.createTutorial(), a = setTimeout(function() {
                            b.removeClass("iorad-loading")
                        }, 5e3), jQuery("#iorad-editor").off().load(function() {
                            b.addClass("iorad-open"), clearTimeout(a)
                        })
                    },
                    d = function() {
                        jQuery("#newTutorial").click(c), jQuery("#categorySelector").change(f), jQuery("#addToKnowledgebaseToggle").change(h), jQuery("#markAsPublished").change(g)
                    },
                    e = function() {
                        jQuery("#insert_iorad_solution .modal-body").html(ioradFreshplug.templates.inputControlTemplate({
                            categories: ioradFreshplug.categories,
                            folders: ioradFreshplug.foldersDictionary[ioradFreshplug.selectedCategoryId],
                            addToKnowledgebase: ioradFreshplug.addToKnowledgebase,
                            markAsPublished: ioradFreshplug.markAsPublished
                        })), ioradFreshplug.freshplug_webwidgetmode && k(!1), d()
                    },
                    f = function(a) {
                        ioradFreshplug.selectedCategoryId = +a.srcElement.value, ioradFreshplug.categories.each(function(a) {
                            a.checked = a.id === ioradFreshplug.selectedCategoryId
                        }), e()
                    },
                    g = function() {
                        ioradFreshplug.markAsPublished = jQuery(this).is(":checked")
                    },
                    h = function() {
                        ioradFreshplug.addToKnowledgebase = jQuery(this).is(":checked"), jQuery("#insert_iorad_solution .body-input-control .loading").removeClass("hide"), 0 === ioradFreshplug.categories.length ? ioradFreshplug.requests.listCategories().then(function(a) {
                            j(a), e()
                        }, function(a) {}) : e()
                    },
                    i = function(c) {
                        b.removeClass("iorad-open iorad-loading"), clearTimeout(a), jQuery("#insert_iorad_solution").modal("hide");
                        var d = iorad.getEmbeddedPlayerUrl(c.uid, c.tutorialId, c.tutorialTitle),
                            e = jQuery(".redactor_editor div");
                        if (ioradFreshplug.addToKnowledgebase) {
                            var f = jQuery(d),
                                g = ioradFreshplug.selectedCategoryId,
                                h = +jQuery("#folderSelector").val(),
                                i = "/solution/categories/{categoryId}/folders/{folderId}/articles/{id}",
                                j = ioradFreshplug.markAsPublished ? 2 : 1,
                                k = "<div>" + f.prop("outerHTML").replace(/\"/g, "'") + "</div>";
                            c.steps.each(function(a) {
                                k += "<div style='display: none;'>" + a.description + "</div>"
                            });
                            var l = {
                                    solution_article: {
                                        title: c.tutorialTitle,
                                        folder_id: h,
                                        description: k,
                                        status: j
                                    }
                                },
                                m = JSON.stringify(l);
                            ioradFreshplug.requests.createArticle(g, h, m).then(function(a) {
                                var b = i.replace("{categoryId}", g).replace("{folderId}", h).replace("{id}", a.article.id);
                                if (e.length > 0 && !ioradFreshplug.freshplug_webwidgetmode) {
                                    e.append("<p>This solution article should help you: " + ioradFreshplug.templates.getHyperLink(b, c.tutorialTitle) + "</p>");
                                    var d = jQuery("#successModal");
                                    d.length > 0 && d.remove(), jQuery("body").append(ioradFreshplug.templates.articleCreatedModalTemplate({
                                        title: c.tutorialTitle,
                                        href: b
                                    }, !0)), jQuery("#successModal").modal({
                                        backdrop: !0,
                                        show: !0
                                    })
                                } else {
                                    var d = jQuery("#successModal");
                                    d.length > 0 && d.remove(), jQuery("body").append(ioradFreshplug.templates.articleCreatedModalTemplate({
                                        title: c.tutorialTitle,
                                        href: b
                                    }, !1)), jQuery("#successModal").modal({
                                        backdrop: !0,
                                        show: !0
                                    })
                                }
                            })
                        } else e.append("<p>" + d + "</p>")
                    },
                    j = function(a) {
                        ioradFreshplug.categories = [], ioradFreshplug.foldersDictionary = {}, a.each(function(a) {
                            ioradFreshplug.categories.push({
                                id: a.category.id,
                                name: a.category.name,
                                checked: !1
                            }), ioradFreshplug.foldersDictionary[a.category.id] = a.category.folders
                        }), ioradFreshplug.categories[0].checked = !0, ioradFreshplug.selectedCategoryId = ioradFreshplug.categories[0].id
                    },
                    k = function(a) {
                        var b = jQuery("#addToKnowledgebaseToggle");
                        a ? b.removeClass("hide") : b.addClass("hide")
                    },
                    l = function(a) {
                        if (a.preventDefault(), ioradFreshplug.freshplug_webwidgetmode = !1, 0 === jQuery("body #insert_iorad_solution").length) {
                            jQuery("body").append(ioradFreshplug.templates.insertSolutionModal());
                            var b = {
                                categories: ioradFreshplug.categories,
                                folders: ioradFreshplug.selectedCategoryId ? ioradFreshplug.foldersDictionary[ioradFreshplug.selectedCategoryId] : [],
                                addToKnowledgebase: ioradFreshplug.addToKnowledgebase,
                                markAsPublished: ioradFreshplug.markAsPublished
                            };
                            jQuery("#insert_iorad_solution .modal-body").html(ioradFreshplug.templates.inputControlTemplate(b)), d()
                        }
                        k(!0), jQuery("#insert_iorad_solution").modal({
                            backdrop: !0,
                            show: !0
                        })
                    },
                    m = function(a) {
                        a.preventDefault(), ioradFreshplug.addToKnowledgebase = !0, ioradFreshplug.freshplug_webwidgetmode = !0, 0 === jQuery("body #insert_iorad_solution").length && jQuery("body").append(ioradFreshplug.templates.insertSolutionModal()), ioradFreshplug.requests.listCategories().then(function(a) {
                            j(a), e(), jQuery("#insert_iorad_solution").modal({
                                backdrop: !0,
                                show: !0
                            })
                        }, function(a) {})
                    };
                jQuery(".insert_iorad").click(l), jQuery("#insertIoradToKnowledgebaseButton").click(m), iorad.on("editor:close", i)
            })
        },
        freshPlugInit = function() {
            initTemplate(), initializeFreshplug()
        },
        CustomWidgetLoaded = function(a) {
            var b = 10,
                c = function() {
                    window.iorad && window.Handlebars ? a() : window.setTimeout(c, b)
                };
            window.setTimeout(c, b)
        };
    CustomWidgetLoaded(freshPlugInit);
</script>